{"version":3,"file":"static/webpack/static/development/pages/Resume.js.8ec25a09c5e145215426.hot-update.js","sources":["webpack:///./pages/Resume.js"],"sourcesContent":["import Layout from \"../components/Layout\";\nimport pdf from '../assets/resume.png';\nimport styled from 'styled-components';\nimport Paragraph from \"../styles/Paragraph\";\nimport MainHeading from \"../styles/MainHeading\";\nimport theme from '../styles/theme';\nimport Link from '../styles/Link';\nimport Body from \"../styles/Body\";\n\nconst FlexView = styled.div`\n  display:flex;\n  flex-direction:row;\n  flex-wrap:wrap;\n  justify-content:center;\n`;\n\nconst TextWrapper = styled.div`\n  min-width:330px;\n  max-width:600px;\n  padding-left:10px;\n`;\n\nconst ResumeWrapper = styled.div`\n  margin-top:20px;\n  padding-right:40px;\n  display:inline-block;\n  max-width:600px;\n  min-width:330px;\n`;\n\nconst ResumeLanding = styled.img`\n  width:100%;\n  height:auto;\n  border: 1px solid ${theme.black};\n`;\n\n\n\n\nconst Resume = () => (\n  <Layout>\n    <Body>\n    <FlexView>\n      <ResumeWrapper>\n        <ResumeLanding src={pdf} />\n      </ResumeWrapper>\n\n      <TextWrapper>\n        <MainHeading primary center>The Over-Architected Resume</MainHeading>\n        <Paragraph>\n        Every now and then, limitations can lead you down a new path.\n        I am no expert at Word or any other application for formatting text,\n        and previously I had tried my best to make a presentable resume\n        only to come up short. This lead me down a path to try something\n        new by leaning on more familiar languages: HTML, and CSS via\n        <Link href='https://sass-lang.com/' target=\"_blank\"> Sass</Link>\n        </Paragraph>\n        <Paragraph>\n        The resume is divided into 4 distinct sections: Contact,\n        Employment, Education, and Skills. The entire page is laid\n        with CSS grid. All sub sections are laid out with CSS grid as well,\n        with exception to the Skills section.\n        </Paragraph>\n        <Paragraph>\n        The Skills section has 3 categories that are spaced via flexbox.\n        Each category contains child nodes with are spaced by yet another\n        display:flex. I went this route over CSS grid because it made\n        adding skills MUCH simpler.\n        </Paragraph>\n        <Paragraph>\n        By this time I had all of my sections laid out, had all of their\n        respective CSS divided into SCSS files and imported into a main file,\n        and had spent more time than I care to admit refactoring reused SCSS into\n        mixins. I decided to go one step further - why not add external libraries\n        into the mix? Big thanks to <Link href='https://fontawesome.com'>FontAwesome </Link>\n         and <Link href='https://tachyons.io' target=\"_blank\">Tachyons CSS </Link>\n        for taking care of all the icons and styling.\n        </Paragraph>\n        <Paragraph>\n        While in hindsight I recognize I in fact did not choose the best tool for\n        the job, it ended up being great experiment with HTML/CSS without the\n        requirement of responsive design.. for now. It definitely wasn't the fast\n        route, but it was a nice opportunity to take the road less traveled.\n        </Paragraph>\n      </TextWrapper>\n    </FlexView>\n    </Body>\n\n  </Layout>\n);\n\nexport default Resume;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AACA;AAQA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAvCA;AACA;AAmDA;;;;A","sourceRoot":""}